package hspc.gradingprogram;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;

/**
 * Created by Noah Davis on 4/24/2016.
 * <p>
 * This work is licensed under a
 * Creative Commons Attribution 4.0
 * International License.
 * <p>
 * You can read more about the license by
 * visiting the link provided below.
 * http://creativecommons.org/licenses/by/4.0/legalcode
 * <p>
 * THE SOFTWARE IS PROVIDED "AS IS",
 * WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED
 * TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL
 * THE AUTHORS OR COPYRIGHT HOLDERS BE
 * LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF
 * CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 */

/**
 * Compares the output of a submission to the expected output.
 */
class OutputComparator {

    private final int problem;
    private final String output;

    /**
     * Default constructor.
     *
     * @param problem The problem number to be compared.
     * @param output  The output that was generated by the submission.
     */
    OutputComparator(int problem, String output) {
        this.problem = problem;
        this.output = output;
    }

    /**
     * Compares the submission output and the expected output.
     *
     * @return True if the outputs are the same, false otherwise.
     */
    boolean Compare() {
        try (BufferedReader br = new BufferedReader(new FileReader(ProblemToPath(problem)))) {
            StringBuilder builder = new StringBuilder();
            for (String line; (line = br.readLine()) != null; ) {
                builder.append(line).append('\n');
            }
            return builder.toString().equals(output);
        } catch (IOException x) {
            Display.AddLine("Error loading config file:\n" + x);
        }
        return false;
    }

    /**
     * Converts a problem integer into an output file path.
     *
     * @param problem The problem number to convert.
     * @return A path, as a string, to the problem's output data.
     */
    private String ProblemToPath(int problem) {
        return Main.Configuration.get("soldir") + File.separator + String.format("%02d", problem) + File.separator + "output";
    }
}
